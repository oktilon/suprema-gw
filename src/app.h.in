#ifndef Main_H
#define Main_H

#include <stdint.h>
#include <stdarg.h>
#include <systemd/sd-bus.h>
#include "common.h"

// Gateway service version
#define VERSION_MAJOR @version_major@
#define VERSION_MINOR @version_minor@
#define VERSION_REV @version_rev@

// Gateway service log levels
#define LOG_LEVEL_ALWAYS    -1
#define LOG_LEVEL_ERROR     0
#define LOG_LEVEL_WARNING   1
#define LOG_LEVEL_INFO      2
#define LOG_LEVEL_DEBUG     3
#define LOG_LEVEL_TRACE     4
#define LOG_LEVEL_MAX       LOG_LEVEL_TRACE

#define LOG_TYPE_NORMAL     0
#define LOG_TYPE_EXTENDED   1

// #define FUNCTION_NAME()     (const char *)(__PRETTY_FUNCTION__)
#define FUNCTION_NAME()     (const char *)(__func__)

// Gateway service log macros
void selfLogFunction(const char *file, int line, const char *func, int lvl, const char* fmt, ...);
// Log always
#define selfLog(FMT, ...)    selfLogFunction((const char *)(__FILE__), __LINE__, FUNCTION_NAME(), LOG_LEVEL_ALWAYS,  FMT __VA_OPT__(,) __VA_ARGS__)
// Log ERROR level
#define selfLogErr(FMT, ...) selfLogFunction((const char *)(__FILE__), __LINE__, FUNCTION_NAME(), LOG_LEVEL_ERROR,   FMT __VA_OPT__(,) __VA_ARGS__)
// Log WARNING level
#define selfLogWrn(FMT, ...) selfLogFunction((const char *)(__FILE__), __LINE__, FUNCTION_NAME(), LOG_LEVEL_WARNING, FMT __VA_OPT__(,) __VA_ARGS__)
// Log INFO level
#define selfLogInf(FMT, ...) selfLogFunction((const char *)(__FILE__), __LINE__, FUNCTION_NAME(), LOG_LEVEL_INFO,    FMT __VA_OPT__(,) __VA_ARGS__)
// Log DEBUG level
#define selfLogDbg(FMT, ...) selfLogFunction((const char *)(__FILE__), __LINE__, FUNCTION_NAME(), LOG_LEVEL_DEBUG,   FMT __VA_OPT__(,) __VA_ARGS__)
// Log TRACE level
#define selfLogTrc(FMT, ...) selfLogFunction((const char *)(__FILE__), __LINE__, FUNCTION_NAME(), LOG_LEVEL_TRACE,   FMT __VA_OPT__(,) __VA_ARGS__)

#define returnIfFailLevel(LVL, EXPR, FMT, ...) \
    do { \
        if ((EXPR)) \
            { } \
        else \
        { \
            selfLogFunction ((const char *)(__FILE__) \
                , __LINE__ \
                , FUNCTION_NAME() \
                , LVL \
                , FMT __VA_OPT__ (,) __VA_ARGS__); \
            return; \
        } \
    } while (0)

#define returnValIfFailLevel(LVL, EXPR, VAL, FMT, ...) \
    do { \
        if ((EXPR)) \
            { } \
        else \
        { \
            selfLogFunction ((const char *)(__FILE__) \
                , __LINE__ \
                , FUNCTION_NAME() \
                , LVL \
                , FMT __VA_OPT__ (,) __VA_ARGS__); \
            return (VAL); \
        } \
    } while (0)

#define returnIfFailErr(EXPR, FMT, ...)             returnIfFailLevel(LOG_LEVEL_ERROR,   (EXPR), FMT __VA_OPT__ (,) __VA_ARGS__)
#define returnIfFailWrn(EXPR, FMT, ...)             returnIfFailLevel(LOG_LEVEL_WARNING, (EXPR), FMT __VA_OPT__ (,) __VA_ARGS__)
#define returnIfFailInf(EXPR, FMT, ...)             returnIfFailLevel(LOG_LEVEL_INFO,    (EXPR), FMT __VA_OPT__ (,) __VA_ARGS__)
#define returnIfFailDbg(EXPR, FMT, ...)             returnIfFailLevel(LOG_LEVEL_DEBUG,   (EXPR), FMT __VA_OPT__ (,) __VA_ARGS__)
#define returnIfFailTrc(EXPR, FMT, ...)             returnIfFailLevel(LOG_LEVEL_TRACE,   (EXPR), FMT __VA_OPT__ (,) __VA_ARGS__)

#define returnValIfFailErr(EXPR, VAL, FMT, ...)     returnValIfFailLevel(LOG_LEVEL_ERROR,   (EXPR), VAL, FMT __VA_OPT__ (,) __VA_ARGS__)
#define returnValIfFailWrn(EXPR, VAL, FMT, ...)     returnValIfFailLevel(LOG_LEVEL_WARNING, (EXPR), VAL, FMT __VA_OPT__ (,) __VA_ARGS__)
#define returnValIfFailInf(EXPR, VAL, FMT, ...)     returnValIfFailLevel(LOG_LEVEL_INFO,    (EXPR), VAL, FMT __VA_OPT__ (,) __VA_ARGS__)
#define returnValIfFailDbg(EXPR, VAL, FMT, ...)     returnValIfFailLevel(LOG_LEVEL_DEBUG,   (EXPR), VAL, FMT __VA_OPT__ (,) __VA_ARGS__)
#define returnValIfFailTrc(EXPR, VAL, FMT, ...)     returnValIfFailLevel(LOG_LEVEL_TRACE,   (EXPR), VAL, FMT __VA_OPT__ (,) __VA_ARGS__)


#endif